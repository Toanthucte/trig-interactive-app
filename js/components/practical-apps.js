/**
 * Practical Applications Component - Project V2
 * Author: NQQ
 * Created: 24/07/2024
 */

export const PracticalApps = {
    isInitialized: false,
    elements: {},
    state: {
        currentCategory: 'construction',
        currentProblem: null,
        userSolution: {},
        showingSolution: false,
    },

    PROBLEM_CATEGORIES: {
        construction: {
            name: 'X√¢y d·ª±ng',
            icon: 'üèóÔ∏è',
            problems: [
                {
                    title: "T√≠nh chi·ªÅu cao c·ªßa t√≤a nh√†",
                    description: "B·∫°n ƒë·ª©ng c√°ch ch√¢n m·ªôt t√≤a nh√† 50m. G√≥c n√¢ng t·ª´ v·ªã tr√≠ c·ªßa b·∫°n ƒë·∫øn ƒë·ªânh t√≤a nh√† l√† 60¬∞. T√≠nh chi·ªÅu cao c·ªßa t√≤a nh√†.",
                    diagram: 'S∆° ƒë·ªì: M·ªôt ng∆∞·ªùi ƒë·ª©ng c√°ch t√≤a nh√† m·ªôt kho·∫£ng, nh√¨n l√™n ƒë·ªânh t√≤a nh√†.',
                    inputs: [
                        { name: 'height', label: 'Chi·ªÅu cao (m)', type: 'number' }
                    ],
                    solution: { height: 86.6 },
                    calculation: (inputs) => 50 * Math.tan(Utils.degToRad(60)),
                    steps: [
                        "G·ªçi h l√† chi·ªÅu cao t√≤a nh√† v√† d l√† kho·∫£ng c√°ch t·ª´ ng∆∞·ªùi quan s√°t ƒë·∫øn ch√¢n t√≤a nh√† (d=50m).",
                        "G√≥c n√¢ng l√† Œ± = 60¬∞.",
                        "Ta c√≥ m·ªëi quan h·ªá: tan(Œ±) = h / d.",
                        "Suy ra, h = d * tan(Œ±) = 50 * tan(60¬∞).",
                        "h ‚âà 50 * 1.732 = 86.6 (m)."
                    ]
                }
            ]
        },
        navigation: {
            name: 'H√†ng h·∫£i',
            icon: 'üß≠',
            problems: [
                {
                    title: "X√°c ƒë·ªãnh v·ªã tr√≠ t√†u",
                    description: "M·ªôt ng·ªçn h·∫£i ƒëƒÉng cao 120m so v·ªõi m·ª±c n∆∞·ªõc bi·ªÉn. T·ª´ ƒë·ªânh h·∫£i ƒëƒÉng, ng∆∞·ªùi ta nh√¨n th·∫•y m·ªôt con t√†u ·ªü g√≥c h·∫° 30¬∞. H·ªèi con t√†u c√°ch ch√¢n h·∫£i ƒëƒÉng bao xa?",
                    diagram: 'S∆° ƒë·ªì: M·ªôt con t√†u tr√™n bi·ªÉn nh√¨n v·ªÅ ph√≠a m·ªôt ng·ªçn h·∫£i ƒëƒÉng tr√™n b·ªù.',
                    inputs: [
                        { name: 'distance', label: 'Kho·∫£ng c√°ch (m)', type: 'number' }
                    ],
                    solution: { distance: 207.8 },
                    calculation: (inputs) => 120 / Math.tan(Utils.degToRad(30)),
                    steps: [
                        "G·ªçi h l√† chi·ªÅu cao ng·ªçn h·∫£i ƒëƒÉng (h=120m) v√† d l√† kho·∫£ng c√°ch t·ª´ t√†u ƒë·∫øn ch√¢n h·∫£i ƒëƒÉng.",
                        "G√≥c h·∫° t·ª´ ƒë·ªânh l√† 30¬∞, do ƒë√≥ g√≥c n√¢ng t·ª´ t√†u ƒë·∫øn ƒë·ªânh c≈©ng l√† 30¬∞ (so le trong).",
                        "Ta c√≥ m·ªëi quan h·ªá: tan(30¬∞) = h / d.",
                        "Suy ra, d = h / tan(30¬∞) = 120 / tan(30¬∞).",
                        "d ‚âà 120 / 0.577 = 207.8 (m)."
                    ]
                }
            ]
        },
        astronomy: {
            name: 'Thi√™n vƒÉn',
            icon: 'üî≠',
            problems: [
                {
                    title: "T√≠nh kho·∫£ng c√°ch ƒë·∫øn ng√¥i sao",
                    description: "C√°c nh√† thi√™n vƒÉn ƒëo th·ªã sai c·ªßa m·ªôt ng√¥i sao g·∫ßn l√† 0.772 gi√¢y cung. M·ªôt gi√¢y cung b·∫±ng 1/3600 ƒë·ªô. T√≠nh kho·∫£ng c√°ch t·ª´ Tr√°i ƒê·∫•t ƒë·∫øn ng√¥i sao ƒë√≥ theo ƒë∆°n v·ªã nƒÉm √°nh s√°ng, bi·∫øt 1 parsec (pc) x·∫•p x·ªâ 3.26 nƒÉm √°nh s√°ng v√† kho·∫£ng c√°ch d (t√≠nh b·∫±ng parsec) ƒë∆∞·ª£c t√≠nh b·ªüi c√¥ng th·ª©c d = 1/p, v·ªõi p l√† th·ªã sai (t√≠nh b·∫±ng gi√¢y cung).",
                    inputs: [
                        { name: 'distance_ly', label: 'Kho·∫£ng c√°ch (nƒÉm √°nh s√°ng)', type: 'number' }
                    ],
                    solution: { distance_ly: 4.22 },
                    calculation: () => (1 / 0.772) * 3.26,
                    steps: [
                        "Th·ªã sai c·ªßa ng√¥i sao l√† p = 0.772 gi√¢y cung.",
                        "C√¥ng th·ª©c t√≠nh kho·∫£ng c√°ch d (t√≠nh b·∫±ng parsec) l√† d = 1/p.",
                        "d = 1 / 0.772 ‚âà 1.295 parsec.",
                        "ƒê·ªïi t·ª´ parsec sang nƒÉm √°nh s√°ng: 1.295 pc * 3.26 ly/pc ‚âà 4.22 nƒÉm √°nh s√°ng.",
                        "ƒê√¢y ch√≠nh l√† kho·∫£ng c√°ch ƒë·∫øn Proxima Centauri, ng√¥i sao g·∫ßn nh·∫•t v·ªõi H·ªá M·∫∑t Tr·ªùi."
                    ]
                }
            ]
        },
        physics: {
            name: 'V·∫≠t l√Ω',
            icon: 'üî¨',
            problems: [
                {
                    title: "Ph√¢n t√≠ch l·ª±c tr√™n m·∫∑t ph·∫≥ng nghi√™ng",
                    description: "M·ªôt v·∫≠t n·∫∑ng 10kg ƒë·∫∑t tr√™n m·ªôt m·∫∑t ph·∫≥ng nghi√™ng m·ªôt g√≥c 30¬∞ so v·ªõi ph∆∞∆°ng ngang. H√£y t√≠nh th√†nh ph·∫ßn c·ªßa tr·ªçng l·ª±c song song v·ªõi m·∫∑t ph·∫≥ng nghi√™ng, th√†nh ph·∫ßn n√†y c√≥ xu h∆∞·ªõng k√©o v·∫≠t tr∆∞·ª£t xu·ªëng.",
                    inputs: [
                        { name: 'force_parallel', label: 'L·ª±c song song (N)', type: 'number' }
                    ],
                    solution: { force_parallel: 49 },
                    calculation: () => 10 * 9.8 * Math.sin(Utils.degToRad(30)),
                    steps: [
                        "Tr·ªçng l·ª±c (P) c·ªßa v·∫≠t l√† P = m * g = 10 kg * 9.8 m/s¬≤ = 98 N.",
                        "G√≥c c·ªßa m·∫∑t ph·∫≥ng nghi√™ng l√† Œ± = 30¬∞.",
                        "Th√†nh ph·∫ßn tr·ªçng l·ª±c song song v·ªõi m·∫∑t ph·∫≥ng nghi√™ng (P_parallel) ƒë∆∞·ª£c t√≠nh b·∫±ng c√¥ng th·ª©c: P_parallel = P * sin(Œ±).",
                        "P_parallel = 98 * sin(30¬∞) = 98 * 0.5 = 49 N."
                    ]
                }
            ]
        },
        geography: {
            name: 'ƒê·ªãa l√Ω',
            icon: 'üó∫Ô∏è',
            problems: [
                {
                    title: "∆Ø·ªõc t√≠nh b√°n k√≠nh Tr√°i ƒê·∫•t",
                    description: "Eratosthenes quan s√°t th·∫•y v√†o ng√†y h·∫° ch√≠, t·∫°i th√†nh ph·ªë Syene, M·∫∑t Tr·ªùi ·ªü ngay tr√™n ƒë·ªânh ƒë·∫ßu (kh√¥ng c√≥ b√≥ng). C√πng l√∫c ƒë√≥, ·ªü Alexandria, c√°ch Syene 800km v·ªÅ ph√≠a b·∫Øc, m·ªôt c√¢y g·∫≠y th·∫≥ng ƒë·ª©ng l·∫°i t·∫°o ra b√≥ng v·ªõi g√≥c 7.2¬∞. H√£y ∆∞·ªõc t√≠nh b√°n k√≠nh c·ªßa Tr√°i ƒê·∫•t.",
                    inputs: [
                        { name: 'radius_km', label: 'B√°n k√≠nh Tr√°i ƒê·∫•t (km)', type: 'number' }
                    ],
                    solution: { radius_km: 6366 },
                    calculation: () => 800 / Utils.degToRad(7.2),
                    steps: [
                        "G√≥c l·ªách 7.2¬∞ ch√≠nh l√† g√≥c ·ªü t√¢m Tr√°i ƒê·∫•t ch·∫Øn cung c√≥ ƒë·ªô d√†i 800km (kho·∫£ng c√°ch gi·ªØa hai th√†nh ph·ªë).",
                        "Chuy·ªÉn ƒë·ªïi g√≥c sang radian: Œ±_rad = 7.2 * (œÄ / 180).",
                        "C√¥ng th·ª©c t√≠nh ƒë·ªô d√†i cung tr√≤n l√† L = R * Œ±_rad, trong ƒë√≥ R l√† b√°n k√≠nh.",
                        "Suy ra, R = L / Œ±_rad = 800 / (7.2 * œÄ / 180).",
                        "R ‚âà 800 / 0.1256 ‚âà 6366 km."
                    ]
                }
            ]
        },
    },

    init(container) {
        if (this.isInitialized) return;
        console.log('PracticalApps component initialized');
        this.render(container);
        this.cacheElements();
        this.addEventListeners();
        this.loadRandomProblem();
        this.isInitialized = true;
    },

    render(container) {
        container.innerHTML = `
            <div class="section-header">
                <h2>üåç ·ª®ng D·ª•ng Th·ª±c T·∫ø</h2>
                <p class="section-description">Gi·∫£i quy·∫øt c√°c b√†i to√°n th·ª±c t·∫ø s·ª≠ d·ª•ng l∆∞·ª£ng gi√°c.</p>
            </div>
            <div class="apps-layout">
                <div class="problem-statement">
                    <h3 class="problem-title"></h3>
                    <p class="problem-description"></p>
                    <div class="problem-diagram"></div>
                </div>
                <div class="problem-solver">
                    <div class="input-section"></div>
                    <div class="action-buttons">
                        <button id="check-solution">Ki·ªÉm tra</button>
                        <button id="show-solution">Xem gi·∫£i</button>
                        <button id="next-problem">B√†i to√°n kh√°c</button>
                    </div>
                    <div class="result-display"></div>
                    <div class="solution-section"></div>
                </div>
            </div>
        `;
    },

    cacheElements() {
        const section = document.getElementById('practical-apps');
        this.elements = {
            section,
            problemTitle: section.querySelector('.problem-title'),
            problemDescription: section.querySelector('.problem-description'),
            problemDiagram: section.querySelector('.problem-diagram'),
            inputSection: section.querySelector('.input-section'),
            resultDisplay: section.querySelector('.result-display'),
            solutionSection: section.querySelector('.solution-section'),
            checkBtn: section.querySelector('#check-solution'),
            showSolutionBtn: section.querySelector('#show-solution'),
            nextProblemBtn: section.querySelector('#next-problem'),
        };
    },

    addEventListeners() {
        this.elements.checkBtn.addEventListener('click', () => this.checkSolution());
        this.elements.showSolutionBtn.addEventListener('click', () => this.showSolution());
        this.elements.nextProblemBtn.addEventListener('click', () => this.loadRandomProblem());
    },

    loadRandomProblem() {
        const allCategoryKeys = Object.keys(this.PROBLEM_CATEGORIES);
        if (allCategoryKeys.length === 0) {
            console.error("No problem categories found.");
            return;
        }

        // 1. Select a random category
        const randomCategoryKey = allCategoryKeys[Math.floor(Math.random() * allCategoryKeys.length)];
        const category = this.PROBLEM_CATEGORIES[randomCategoryKey];
        this.state.currentCategory = randomCategoryKey;

        // 2. Select a random problem from that category
        if (!category || category.problems.length === 0) {
            console.error(`Category ${randomCategoryKey} has no problems.`);
            // Optionally, try another category or show a default message
            return;
        }
        const problemIndex = Math.floor(Math.random() * category.problems.length);
        this.state.currentProblem = category.problems[problemIndex];
        
        this.state.showingSolution = false;
        this.state.userSolution = {};
        this.updateProblemDisplay();
    },

    updateProblemDisplay() {
        if (!this.state.currentProblem) {
            this.elements.problemTitle.textContent = 'Kh√¥ng c√≥ b√†i to√°n n√†o';
            this.elements.problemDescription.textContent = 'Vui l√≤ng th√™m b√†i to√°n v√†o file practical-apps.js';
            return;
        }
        const problem = this.state.currentProblem;
        this.elements.problemTitle.textContent = problem.title;
        this.elements.problemDescription.textContent = problem.description;
        this.elements.problemDiagram.innerHTML = problem.diagram; // Use innerHTML for diagram
        
        this.elements.inputSection.innerHTML = problem.inputs.map(input => `
            <div class="input-group">
                <label for="input-${input.name}">${input.label}:</label>
                <input type="text" inputmode="decimal" id="input-${input.name}" data-name="${input.name}" class="practical-app-input" data-math-keyboard>
            </div>
        `).join('');
        this.resetSolver();
    },

    checkSolution() {
        const problem = this.state.currentProblem;
        if (!problem) return;

        let allCorrect = true;
        problem.inputs.forEach(input => {
            const inputEl = this.elements.inputSection.querySelector(`#input-${input.name}`);
            const userAnswer = parseFloat(inputEl.value);
            const correctAnswer = problem.solution[input.name];

            if (isNaN(userAnswer) || Math.abs(userAnswer - correctAnswer) > 0.1) {
                allCorrect = false;
            }
        });

        if (allCorrect) {
            this.elements.resultDisplay.innerHTML = '<p class="success">üéâ Ch√≠nh x√°c! B·∫°n ƒë√£ gi·∫£i ƒë√∫ng b√†i to√°n.</p>';
        } else {
            this.elements.resultDisplay.innerHTML = '<p class="error">ü§î Ch∆∞a ƒë√∫ng. H√£y th·ª≠ l·∫°i ho·∫∑c xem l·ªùi gi·∫£i nh√©.</p>';
        }
        this.elements.resultDisplay.style.display = 'block';
    },

    showSolution() {
        // Logic to display the detailed solution
        this.elements.solutionSection.innerHTML = `<h4>C√°c b∆∞·ªõc gi·∫£i:</h4><ol>${this.state.currentProblem.steps.map(s => `<li>${s}</li>`).join('')}</ol>`;
        this.elements.solutionSection.style.display = 'block';
    },

    resetSolver() {
        this.elements.resultDisplay.style.display = 'none';
        this.elements.solutionSection.style.display = 'none';
        this.elements.inputSection.querySelectorAll('input').forEach(i => i.value = '');
    }
};
